   1               		.file	"Utils.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	__vector_12
  13               	__vector_12:
  14               	.LFB5:
  15               		.file 1 "src/Utils.c"
   1:src/Utils.c   **** #include "Utils.h"
   2:src/Utils.c   **** 
   3:src/Utils.c   **** #include <avr/interrupt.h>
   4:src/Utils.c   **** #include <util/atomic.h>
   5:src/Utils.c   **** 
   6:src/Utils.c   **** static volatile uint_least64_t timerMillis = 0; 
   7:src/Utils.c   **** 
   8:src/Utils.c   **** ISR (TIMER1_COMPA_vect) {
  16               		.loc 1 8 0
  17               		.cfi_startproc
  18 0000 1F92      		push r1
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 1, -2
  22 0002 0F92      		push r0
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 0, -3
  26 0004 0FB6      		in r0,__SREG__
  27 0006 0F92      		push r0
  28 0008 1124      		clr __zero_reg__
  29 000a 2F93      		push r18
  30               	.LCFI2:
  31               		.cfi_def_cfa_offset 5
  32               		.cfi_offset 18, -4
  33 000c 3F93      		push r19
  34               	.LCFI3:
  35               		.cfi_def_cfa_offset 6
  36               		.cfi_offset 19, -5
  37 000e 4F93      		push r20
  38               	.LCFI4:
  39               		.cfi_def_cfa_offset 7
  40               		.cfi_offset 20, -6
  41 0010 5F93      		push r21
  42               	.LCFI5:
  43               		.cfi_def_cfa_offset 8
  44               		.cfi_offset 21, -7
  45 0012 6F93      		push r22
  46               	.LCFI6:
  47               		.cfi_def_cfa_offset 9
  48               		.cfi_offset 22, -8
  49 0014 7F93      		push r23
  50               	.LCFI7:
  51               		.cfi_def_cfa_offset 10
  52               		.cfi_offset 23, -9
  53 0016 8F93      		push r24
  54               	.LCFI8:
  55               		.cfi_def_cfa_offset 11
  56               		.cfi_offset 24, -10
  57 0018 9F93      		push r25
  58               	.LCFI9:
  59               		.cfi_def_cfa_offset 12
  60               		.cfi_offset 25, -11
  61 001a AF93      		push r26
  62               	.LCFI10:
  63               		.cfi_def_cfa_offset 13
  64               		.cfi_offset 26, -12
  65               	/* prologue: Signal */
  66               	/* frame size = 0 */
  67               	/* stack size = 12 */
  68               	.L__stack_usage = 12
   9:src/Utils.c   ****     timerMillis++;
  69               		.loc 1 9 0
  70 001c 2091 0000 		lds r18,timerMillis
  71 0020 3091 0000 		lds r19,timerMillis+1
  72 0024 4091 0000 		lds r20,timerMillis+2
  73 0028 5091 0000 		lds r21,timerMillis+3
  74 002c 6091 0000 		lds r22,timerMillis+4
  75 0030 7091 0000 		lds r23,timerMillis+5
  76 0034 8091 0000 		lds r24,timerMillis+6
  77 0038 9091 0000 		lds r25,timerMillis+7
  78 003c A1E0      		ldi r26,lo8(1)
  79 003e 0E94 0000 		call __adddi3_s8
  80 0042 2093 0000 		sts timerMillis,r18
  81 0046 3093 0000 		sts timerMillis+1,r19
  82 004a 4093 0000 		sts timerMillis+2,r20
  83 004e 5093 0000 		sts timerMillis+3,r21
  84 0052 6093 0000 		sts timerMillis+4,r22
  85 0056 7093 0000 		sts timerMillis+5,r23
  86 005a 8093 0000 		sts timerMillis+6,r24
  87 005e 9093 0000 		sts timerMillis+7,r25
  88               	/* epilogue start */
  10:src/Utils.c   **** }
  89               		.loc 1 10 0
  90 0062 AF91      		pop r26
  91 0064 9F91      		pop r25
  92 0066 8F91      		pop r24
  93 0068 7F91      		pop r23
  94 006a 6F91      		pop r22
  95 006c 5F91      		pop r21
  96 006e 4F91      		pop r20
  97 0070 3F91      		pop r19
  98 0072 2F91      		pop r18
  99 0074 0F90      		pop r0
 100 0076 0FBE      		out __SREG__,r0
 101 0078 0F90      		pop r0
 102 007a 1F90      		pop r1
 103 007c 1895      		reti
 104               		.cfi_endproc
 105               	.LFE5:
 107               	.global	Utils_Init
 109               	Utils_Init:
 110               	.LFB6:
  11:src/Utils.c   **** 
  12:src/Utils.c   **** void Utils_Init(void) {
 111               		.loc 1 12 0
 112               		.cfi_startproc
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 0 */
 116               	.L__stack_usage = 0
  13:src/Utils.c   **** 	// CTC mode, Clock/8
  14:src/Utils.c   ****     TCCR1B |= (1 << WGM12) | (1 << CS11);
 117               		.loc 1 14 0
 118 007e E1E8      		ldi r30,lo8(-127)
 119 0080 F0E0      		ldi r31,0
 120 0082 8081      		ld r24,Z
 121 0084 8A60      		ori r24,lo8(10)
 122 0086 8083      		st Z,r24
  15:src/Utils.c   ****  
  16:src/Utils.c   ****     // Load the high byte, then the low byte
  17:src/Utils.c   ****     // into the output compare
  18:src/Utils.c   ****     OCR1AH = (CTC_MATCH_OVERFLOW >> 8);
 123               		.loc 1 18 0
 124 0088 87E0      		ldi r24,lo8(7)
 125 008a 8093 8900 		sts 137,r24
  19:src/Utils.c   ****     OCR1AL = (uint8_t)CTC_MATCH_OVERFLOW;
 126               		.loc 1 19 0
 127 008e 80ED      		ldi r24,lo8(-48)
 128 0090 8093 8800 		sts 136,r24
  20:src/Utils.c   ****  
  21:src/Utils.c   ****     // Enable the compare match interrupt
  22:src/Utils.c   ****     TIMSK1 |= (1 << OCIE1A);
 129               		.loc 1 22 0
 130 0094 EFE6      		ldi r30,lo8(111)
 131 0096 F0E0      		ldi r31,0
 132 0098 8081      		ld r24,Z
 133 009a 8260      		ori r24,lo8(2)
 134 009c 8083      		st Z,r24
 135 009e 0895      		ret
 136               		.cfi_endproc
 137               	.LFE6:
 139               	.global	Utils_Mills
 141               	Utils_Mills:
 142               	.LFB7:
  23:src/Utils.c   **** }
  24:src/Utils.c   **** 
  25:src/Utils.c   **** uint64_t Utils_Mills(void) {
 143               		.loc 1 25 0
 144               		.cfi_startproc
 145               	/* prologue: function */
 146               	/* frame size = 0 */
 147               	/* stack size = 0 */
 148               	.L__stack_usage = 0
 149               	.LVL0:
 150               	.LBB7:
 151               	.LBB8:
 152               	.LBB9:
 153               		.file 2 "/usr/lib/avr/include/util/atomic.h"
   1:/usr/lib/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/avr/include/util/atomic.h **** 
   4:/usr/lib/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/util/atomic.h **** 
   7:/usr/lib/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/util/atomic.h **** 
  10:/usr/lib/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/avr/include/util/atomic.h **** 
  15:/usr/lib/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/avr/include/util/atomic.h **** 
  19:/usr/lib/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/avr/include/util/atomic.h **** */
  31:/usr/lib/avr/include/util/atomic.h **** 
  32:/usr/lib/avr/include/util/atomic.h **** /* $Id$ */
  33:/usr/lib/avr/include/util/atomic.h **** 
  34:/usr/lib/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/avr/include/util/atomic.h **** 
  37:/usr/lib/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/avr/include/util/atomic.h **** 
  40:/usr/lib/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/avr/include/util/atomic.h **** {
  44:/usr/lib/avr/include/util/atomic.h ****     sei();
  45:/usr/lib/avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/avr/include/util/atomic.h **** }
  47:/usr/lib/avr/include/util/atomic.h **** 
  48:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/avr/include/util/atomic.h **** {
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
 154               		.loc 2 50 0
 155               	/* #APP */
 156               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 157 00a0 F894      		cli
 158               	 ;  0 "" 2
 159               	.LVL1:
 160               	/* #NOAPP */
 161               	.LBE9:
 162               	.LBE8:
  26:src/Utils.c   **** 	uint64_t ret;
  27:src/Utils.c   **** 
  28:src/Utils.c   ****     // Ensure this cannot be disrupted
  29:src/Utils.c   ****     ATOMIC_BLOCK(ATOMIC_FORCEON) {
  30:src/Utils.c   ****         ret = timerMillis;
 163               		.loc 1 30 0
 164 00a2 2091 0000 		lds r18,timerMillis
 165 00a6 3091 0000 		lds r19,timerMillis+1
 166 00aa 4091 0000 		lds r20,timerMillis+2
 167 00ae 5091 0000 		lds r21,timerMillis+3
 168 00b2 6091 0000 		lds r22,timerMillis+4
 169 00b6 7091 0000 		lds r23,timerMillis+5
 170 00ba 8091 0000 		lds r24,timerMillis+6
 171 00be 9091 0000 		lds r25,timerMillis+7
 172               	.LVL2:
 173               	.LBB10:
 174               	.LBB11:
  51:/usr/lib/avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/avr/include/util/atomic.h **** }
  53:/usr/lib/avr/include/util/atomic.h **** 
  54:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/avr/include/util/atomic.h **** {
  56:/usr/lib/avr/include/util/atomic.h ****     sei();
 175               		.loc 2 56 0
 176               	/* #APP */
 177               	 ;  56 "/usr/lib/avr/include/util/atomic.h" 1
 178 00c2 7894      		sei
 179               	 ;  0 "" 2
  57:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 180               		.loc 2 57 0
 181               	/* #NOAPP */
 182               	.LBE11:
 183               	.LBE10:
 184               	.LBE7:
  31:src/Utils.c   ****     }
  32:src/Utils.c   ****     return ret;
  33:src/Utils.c   **** }
 185               		.loc 1 33 0
 186 00c4 0895      		ret
 187               		.cfi_endproc
 188               	.LFE7:
 190               		.local	timerMillis
 191               		.comm	timerMillis,8,1
 192               	.Letext0:
 193               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Utils.c
     /tmp/ccH7D6wZ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccH7D6wZ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccH7D6wZ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccH7D6wZ.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccH7D6wZ.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccH7D6wZ.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccH7D6wZ.s:13     .text:0000000000000000 __vector_12
                             .bss:0000000000000000 timerMillis
     /tmp/ccH7D6wZ.s:109    .text:000000000000007e Utils_Init
     /tmp/ccH7D6wZ.s:141    .text:00000000000000a0 Utils_Mills

UNDEFINED SYMBOLS
__adddi3_s8
__do_clear_bss
